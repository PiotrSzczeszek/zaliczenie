@page "/MyClients/documents/add"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Zaliczenie.Data
@using Zaliczenie.Data.Entities
@using Microsoft.AspNetCore.Mvc.Rendering
@using Zaliczenie.Data.Constants
@using Zaliczenie.Utils
@using System.ComponentModel.DataAnnotations
@using Humanizer
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Context
@inject UserService UserService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = AppRoles.Accountant)]

<div class="row w-75 mx-auto">
    <div class="col-md-12">
        <section>
            <EditForm Model="@Input" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <h2>Add Client Document</h2>
                <hr/>

                <div class="form-floating mb-3">
                    <InputText id="documentNumber" @bind-Value="Input.DocumentNumber" class="form-control" placeholder="Document Number..."/>
                    <label for="documentNumber">Document Number</label>
                </div>

                <div class="form-floating mb-3">
                    <InputDate id="addedDate" @bind-Value="Input.AddedDate" class="form-control"/>
                    <label for="addedDate">Added Date</label>
                </div>

                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="Input.Status" class="form-control">
                        <option value="@DocumentStatus.New">New</option>
                        <option value="@DocumentStatus.Processing">Processing</option>
                        <option value="@DocumentStatus.AdditionalInformationRequired">Need more informations</option>
                        <option value="@DocumentStatus.Done">Done</option>
                    </InputSelect>
                    <label for="status">Document status</label>
                </div>

                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="Input.DocumentTypeId" class="form-control">
                        @foreach (var docType in DocumentTypeOptions)
                        {
                            <option value="@docType.Value">@docType.Text</option>
                        }
                    </InputSelect>
                    <label for="documentTypeId">Document Type</label>
                </div>
                
                
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="Input.ClientId" class="form-control">
                        @foreach (var client in ClientOptions)
                        {
                            <option value="@client.Value">@client.Text</option>
                        }
                    </InputSelect>
                    <label for="clientId">Client</label>
                </div>

                <div class="w-50 mx-auto">
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Add Document</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    public InputModel Input { get; set; } = new InputModel();

    public List<SelectListItem> DocumentTypeOptions { get; set; }
    public List<SelectListItem> ClientOptions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await UserService.GetCurrentUser();
        Input.AddedByUserId = currentUser.Id;
        Input.AddedDate = DateTime.Now;
        Input.Status = DocumentStatus.New;

        DocumentTypeOptions = Context.ClientDocumentTypes
            .AsNoTracking()
            .Select(dt => new SelectListItem(dt.Name, dt.Id.ToString()))
            .ToList();
        ClientOptions = Context.Clients
            .AsNoTracking()
            .Where(e => e.AssignedUserId == currentUser!.Id)
            .Select(e => new SelectListItem(e.ClientName, e.ClientId.ToString()))
            .ToList();
    }

    public class InputModel
    {
        [Required]
        public string DocumentNumber { get; set; }

        [Required]
        public string AddedByUserId { get; set; }

        [Required]
        public DateTime AddedDate { get; set; } = DateTime.Now;

        [Required]
        public DocumentStatus Status { get; set; } = DocumentStatus.New;

        [Required]
        public int DocumentTypeId { get; set; }
        
        [Required]
        public int ClientId { get; set; }
    }

    private async Task HandleValidSubmit()
    {
        var clientExists = Context.Clients.Any(c => c.ClientId == Input.ClientId);
        var userExists = Context.Users.Any(u => u.Id == Input.AddedByUserId);
        var documentTypeExists = Context.ClientDocumentTypes.Any(dt => dt.Id == Input.DocumentTypeId);

        
        var clientDocument = new ClientDocuments()
        {
            DocumentNumber = Input.DocumentNumber,
            AddedByUserId = Input.AddedByUserId,
            AddedDate = Input.AddedDate,
            Status = Input.Status,
            DocumentTypeId = Input.DocumentTypeId,
            ClientId = Input.ClientId
        };

        Context.Add(clientDocument);
        Context.SaveChanges();

        NavigationManager.NavigateTo("/MyClients/documents");
    }
}
