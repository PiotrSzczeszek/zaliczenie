@page "/MyClients/{clientId}/documents"
@using Zaliczenie.Data
@using Zaliczenie.Data.DTO
@using Zaliczenie.Data.Entities
@using Zaliczenie.Shared.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Zaliczenie.Utils
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using Zaliczenie.Data
@using Zaliczenie.Data.Constants
@using Zaliczenie.Data.Entities
@using Zaliczenie.Shared.Components
@attribute [Authorize(Roles = AppRoles.Accountant)]
@inject IJSRuntime JS
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject UserService UserService

<h2>
    @ClientName documents
</h2>

<DataTable Data="@ClientDocumentsData" Columns="@ColumnsConfig"
           ActionTemplate="@ActionButtons()">
</DataTable>

@code {
    [Parameter]
    public string clientId { get; set; }

    private string ClientName = "";
    private List<ClientDocuments> ClientDocumentsData { get; set; }

    private List<ColumnsConfig> ColumnsConfig = new()
    {
        new ColumnsConfig()
        {
            DisplayName = "Name",
            PropertyName = nameof(ClientDocuments.DocumentNumber),
            Width = 400
        },
        new ColumnsConfig()
        {
            DisplayName = "Added date",
            PropertyName = nameof(ClientDocuments.AddedDate),
            Width = 400
        },
        new ColumnsConfig()
        {
            DisplayName = "Status",
            PropertyName = nameof(ClientDocuments.Status),
            Width = 350
        }
    };

    private RenderFragment<ClientDocuments> ActionButtons()
    {
        var buttonBuilder = new ButtonsGenerator<ClientDocuments>();
        buttonBuilder
            .AddButton((x) => EditItem(x), this, "btn btn-warning", "oi oi-pencil");

        return buttonBuilder.Build();
    }

    private void EditItem(ClientDocuments item)
    {
        NavigationManager.NavigateTo("/MyClients/documents/edit/" + item.Id);
    }


    protected override async Task OnInitializedAsync()
    {
        var client = DbContext.Clients.First(e => e.ClientId == int.Parse(clientId));
        ClientName = client.ClientName;
        
        ClientDocumentsData = DbContext.ClientDocuments
            .Where(e => e.ClientId == int.Parse(clientId))
            .ToList();

        base.OnInitialized();
    }

}