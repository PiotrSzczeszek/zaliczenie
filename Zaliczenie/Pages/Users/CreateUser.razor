@page "/users/add"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Rendering
@using Zaliczenie.Data
@using Zaliczenie.Data.Entities
@using ValidationSummary = Microsoft.AspNetCore.Components.Forms.ValidationSummary
@using System.ComponentModel.DataAnnotations
@using Zaliczenie.Data.Constants
@using Zaliczenie.Utils
@inject UserManager<User> UserManager
@inject ApplicationDbContext Context
@inject NavigationManager NavigationManager
@inject UserService UserService
@attribute [Authorize(Roles = $"{AppRoles.CompanyManager}, {AppRoles.Admin}")]

<div class="row w-75 mx-auto">
    <div class="col-md-12">
        <section>
            <EditForm Model="@Input" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <h2>Create New User</h2>
                <hr/>

                <div class="form-floating mb-3">
                    <InputText id="email" @bind-Value="Input.Email" class="form-control" placeholder="Email..."/>
                    <label for="email">Email/Username</label>
                </div>

                <div class="form-floating mb-3">
                    <InputText id="password" type="password" @bind-Value="Input.Password" class="form-control" placeholder="Password..."/>
                    <label for="password">Password</label>
                </div>
                <AuthorizeView Roles="@AppRoles.Admin">
                    <Authorized Context="aaa">

                        <div class="form-floating mb-3">
                            <InputSelect @bind-Value="Input.CompanyId" class="form-control">
                                @foreach (var option in CompanyOptions)
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            </InputSelect>
                            <label for="companyId">Company</label>
                        </div>

                    </Authorized>
                </AuthorizeView>
                <div class="row">

                    <AuthorizeView Roles="@AppRoles.Admin">
                        <Authorized Context="bbb">

                            <div class="col-md-6">
                                <div class="form-check mb-3">
                                    <InputCheckbox id="isAdmin" @bind-Value="Input.IsAdmin" class="form-check-input"/>
                                    <label for="isAdmin" class="form-check-label">Has admin access</label>
                                </div>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                    <div class="col-md-6">

                        <div class="form-check mb-3">
                            <InputCheckbox id="isCompanyManager" @bind-Value="Input.IsCompanyManager" class="form-check-input"/>
                            <label for="isCompanyManager" class="form-check-label">Has access to company management</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-check mb-3">
                            <InputCheckbox id="isAccountant" @bind-Value="Input.IsAccountant" class="form-check-input"/>
                            <label for="isAccountant" class="form-check-label">Is accountant</label>
                        </div>
                    </div>
                </div>


                <div class="w-50 mx-auto">
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Create User</button>
                </div>
            </EditForm>
            @if (ValidationErrors.Any())
            {
                <div class="alert alert-danger" role="alert">
                    @foreach (var errorMessage in ValidationErrors)
                    {
                        <p>@errorMessage</p>
                    }
                </div>
            }
        </section>
    </div>
</div>

@code {
    public InputModel Input { get; set; } = new InputModel();

    public List<SelectListItem> CompanyOptions { get; set; }
    List<string> ValidationErrors { get; set; } = new();

    protected override void OnInitialized()
    {
        CompanyOptions = Context.Companies
            .Select(e => new SelectListItem(e.CompanyName, e.CompanyId.ToString()))
            .ToList();
    }

    public class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required]
        public int CompanyId { get; set; }

        public bool IsAdmin { get; set; } = false;

        public bool IsCompanyManager { get; set; } = false;
        public bool IsAccountant { get; set; } = false;
    }

    private async Task HandleValidSubmit()
    {
        var isAdmin = await UserService.DoesUserHaveRole(AppRoles.Admin);
        if (!isAdmin)
        {
            var currentUser = await UserService.GetCurrentUser();
            Input.CompanyId = currentUser!.CompanyId!.Value;
        }
        var user = new User { UserName = Input.Email, Email = Input.Email, CompanyId = Input.CompanyId };
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (result.Succeeded)
        {
            if (Input.IsAdmin)
                await UserManager.AddToRoleAsync(user, AppRoles.Admin);
            if (Input.IsCompanyManager)
                await UserManager.AddToRoleAsync(user, AppRoles.CompanyManager);
            if (Input.IsAccountant)
                await UserManager.AddToRoleAsync(user, AppRoles.Accountant);

            NavigationManager.NavigateTo("/users");
        }
        else
        {
            ValidationErrors = result.Errors.Select(e => e.Description).ToList();
        }
    }
}