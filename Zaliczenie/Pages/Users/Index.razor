@page "/users"
@using Zaliczenie.Data
@using Zaliczenie.Data.DTO
@using Zaliczenie.Data.Entities
@using Zaliczenie.Shared.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Zaliczenie.Utils
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using Zaliczenie.Data
@using Zaliczenie.Data.Constants
@using Zaliczenie.Data.Entities
@using Zaliczenie.Shared.Components
@attribute [Authorize(Roles = AppRoles.CompanyManager)]
@inject IJSRuntime JS
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext

<DataTable Data="@Users" Columns="@ColumnsConfig" 
           ActionTemplate="@ActionButtons()" 

           ></DataTable>

@code {
    
    private List<object> Users { get; set; }

    private List<ColumnsConfig> ColumnsConfig = new()
    {
        new ColumnsConfig()
        {
            DisplayName = "Username",
            PropertyName = nameof(User.UserName),
            Width = 600
        },
        new ColumnsConfig()
        {
            DisplayName = "Company",
            PropertyName = "CompanyName",
            Width = 250
        }
    };

    private RenderFragment<object> ActionButtons()
    {
        var buttonBuilder = new ButtonsGenerator<object>();
        buttonBuilder
            .AddButton((x) => EditItem(x), this, "btn btn-warning", "oi oi-pencil")
            .AddButton((x) => DeleteItem(x), this, "btn btn-danger", "oi oi-trash");

        return buttonBuilder.Build();
    }

    private void EditItem(object item)
    {
        var x = (dynamic)item;
        
        NavigationManager.NavigateTo("/users/edit/" + x.Id);
    }

    private async Task DeleteItem(object item)
    {
        var x = (dynamic)item;
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {x.UserName}?");
        if (confirmed)
        {
            ExecuteDelete(x.Id);
        }
    }

    private async Task ExecuteDelete(string id)
    {
        var user = await UserManager.FindByIdAsync(id);
        await UserManager.DeleteAsync(user!);
        
        await OnInitializedAsync();
    }
    
    protected override async Task OnInitializedAsync()
    {
        var usersQuery = DbContext.Users.AsQueryable();
            
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        
        var userRoles = user.FindAll(claim => claim.Type == System.Security.Claims.ClaimTypes.Role)
            .Select(claim => claim.Value);

        if (!userRoles.Contains(AppRoles.Admin))
        {
            var userEntity = await UserManager.GetUserAsync(user);
            usersQuery = usersQuery.Where(e => e.CompanyId == userEntity.CompanyId);
        }

        Users = usersQuery.Select(e => (object)new
        {
            e.UserName,
            e.Company.CompanyName,
            e.Id
        }).ToList();
        
        base.OnInitialized();
    }

}