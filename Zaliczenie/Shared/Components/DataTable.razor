@using Zaliczenie.Data.DTO
@using System.Diagnostics
@using System.Timers
@typeparam T

@if (Data != null && Columns != null)
{
    <table class="table">
        <thead>
            <tr>
                @foreach (var column in Columns)
                {
                    <th style="cursor:pointer; width:@column.CssWidth" @onclick="() => Sort(column.PropertyName)">
                        @column.DisplayName
                        @if (currentSortingColumn == column.PropertyName)
                        {
                            <span>@(currentSortDirection == SortDirection.Ascending ? "ðŸ”¼" : "ðŸ”½")</span>
                        }
                    </th>
                }
                @if (ActionTemplate != null)
                {
                    <th>Actions</th>
                }
            </tr>
            <tr>
                @foreach (var column in Columns)
                {
                    <th>
                        <div class=" mb-3">
                            <input  class="form-control" @bind="@columnFilterValues[column.PropertyName]" @oninput="() => HandleFilterChange(column.PropertyName)" placeholder="Filter..." />
                        </div>
                    </th>
                }
                @if (ActionTemplate != null)
                {
                    <th></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in FilteredData())
            {
                <tr>
                    @foreach (var column in Columns)
                    {
                        <td>@GetPropertyValue(item, column.PropertyName)</td>
                    }
                    
                    @if (ActionTemplate != null)
                    {
                        <td class="d-flex flex-row gap-2">@ActionTemplate(item)</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public IEnumerable<T> Data { get; set; }

    [Parameter]
    public List<ColumnsConfig> Columns { get; set; }
    
    [Parameter]
    public RenderFragment<T>? ActionTemplate { get; set; }

    private IDictionary<string, string> columnFilterValues = new Dictionary<string, string>();
    private Timer filterDelayTimer = new Timer(500); // 500 ms delay

    private IEnumerable<T>? sortedData;
    private string? currentSortingColumn;
    private SortDirection currentSortDirection = SortDirection.None;

    protected override void OnInitialized()
    {
        foreach (var column in Columns)
        {
            columnFilterValues.Add(column.PropertyName, string.Empty);
        }

        filterDelayTimer.Elapsed += OnFilterDelayElapsed;
        filterDelayTimer.AutoReset = false;
    }

    protected override void OnParametersSet()
    {
        sortedData = Data;
    }

    private IEnumerable<T> FilteredData()
    {
        var filteredData = sortedData;
        foreach (var filter in columnFilterValues)
        {
            if (!string.IsNullOrWhiteSpace(filter.Value))
            {
                filteredData = filteredData.Where(item => GetPropertyValue(item, filter.Key)?.ToString().Contains(filter.Value, StringComparison.OrdinalIgnoreCase) == true);
            }
        }

        return filteredData;
    }

    private void HandleFilterChange(string columnName)
    {
        filterDelayTimer.Stop();
        filterDelayTimer.Start();
    }

    private void OnFilterDelayElapsed(object sender, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    private object GetPropertyValue(object item, string propertyName)
    {
        return item.GetType().GetProperty(propertyName)?.GetValue(item, null);
    }

    private void Sort(string columnName)
    {
        if (currentSortingColumn != columnName)
        {
            currentSortingColumn = columnName;
            currentSortDirection = SortDirection.Ascending;
        }
        else
        {
            currentSortDirection = currentSortDirection switch
            {
                SortDirection.Ascending => SortDirection.Descending,
                SortDirection.Descending => SortDirection.None,
                SortDirection.None => SortDirection.Ascending,
                _ => throw new UnreachableException()
            };
        }

        if (currentSortDirection == SortDirection.None)
        {
            sortedData = Data;
            currentSortingColumn = null;
            
            return;
        }
        
        sortedData = currentSortDirection == SortDirection.Ascending
            ? Data.OrderBy(x => GetPropertyValue(x, columnName))
            : Data.OrderByDescending(x => GetPropertyValue(x, columnName));
    }

    private enum SortDirection
    {
        None,
        Ascending,
        Descending
    }
}
