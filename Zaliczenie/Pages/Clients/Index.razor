@page "/clients"
@using Zaliczenie.Data
@using Zaliczenie.Data.DTO
@using Zaliczenie.Data.Entities
@using Zaliczenie.Shared.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Zaliczenie.Utils
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using Zaliczenie.Data
@using Zaliczenie.Data.Constants
@using Zaliczenie.Data.Entities
@using Zaliczenie.Shared.Components
@attribute [Authorize(Roles = AppRoles.CompanyManager)]
@inject IJSRuntime JS
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject UserService UserService

<DataTable Data="@Clients" Columns="@ColumnsConfig"
           ActionTemplate="@ActionButtons()">
</DataTable>

@code {

    private List<object> Clients { get; set; }

    private List<ColumnsConfig> ColumnsConfig = new()
    {
        new ColumnsConfig()
        {
            DisplayName = "Name",
            PropertyName = nameof(Client.ClientName),
            Width = 600
        },
        new ColumnsConfig()
        {
            DisplayName = "Assigned user",
            PropertyName = "Username",
            Width = 250
        },
        new ColumnsConfig()
        {
            DisplayName = "Company",
            PropertyName = "CompanyName",
            Width = 250
        }
    };

    private RenderFragment<object> ActionButtons()
    {
        var buttonBuilder = new ButtonsGenerator<object>();
        buttonBuilder
            .AddButton((x) => EditItem(x), this, "btn btn-warning", "oi oi-pencil")
            .AddButton((x) => DeleteItem(x), this, "btn btn-danger", "oi oi-trash");

        return buttonBuilder.Build();
    }

    private void EditItem(object item)
    {
        var x = (dynamic)item;

        NavigationManager.NavigateTo("/clients/edit/" + x.ClientId);
    }

    private async Task DeleteItem(object item)
    {
        var x = (dynamic)item;
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {x.ClientName}?");
        if (confirmed)
        {
            ExecuteDelete(x.ClientId);
        }
    }

    private async Task ExecuteDelete(int id)
    {
        
        var client = await DbContext.Clients.FirstAsync(e => e.ClientId == id);
        DbContext.Remove(client);
        await DbContext.SaveChangesAsync();

        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var clientsQuery = DbContext.Clients.AsQueryable();

    // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    // var user = authState.User;
    //
    //
    // var userRoles = user.FindAll(claim => claim.Type == System.Security.Claims.ClaimTypes.Role)
    //     .Select(claim => claim.Value);

        if (!await UserService.DoesUserHaveRole(AppRoles.Admin))
        {
            var userCompany = await UserService.GetCurrentUserCompany();

            clientsQuery = clientsQuery.Where(e => e.CompanyId == userCompany);
        }

        Clients = clientsQuery.Select(e => (object)new
        {
            e.Company.CompanyName,
            e.ClientName,
            Username = e.AssignedUser == null ? "" : e.AssignedUser.UserName,
            e.ClientId
        }).ToList();

        base.OnInitialized();
    }

}